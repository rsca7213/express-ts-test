openapi: 3.0.3
info:
  title: Express TypeScript API Example
  version: 1.0.0
  description: This is a simple example of an Express API written in TypeScript
tags:
  - name: Auth
    description: User authorization
  - name: Users
    description: User management
  - name: Products
    description: Product management
  - name: Orders
    description: Order management
paths:
  '/api/auth/login':
    post:
      tags:
        - Auth
      summary: Login with credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  format: password
                  example: Password123*
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: auth-token-long-generated-string
        400:
          description: Request was not successful due to a validation error
        401:
          description: Request was not successful because credentials were incorrect
        404:
          description: Request was invalid because user does not exist
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/auth/register':
    post:
      tags:
        - Auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  format: password
                  example: Password123*
      responses:
        200:
          description: User registered succesfully
        400:
          description: Request was not successful due to a validation error
        409:
          description: Request was not successful because the user already exists
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/users':
    get:
      tags:
        - Users
      summary: Get all users (Admin only)
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          format: int64
                          example: 1
                        email:
                          type: string
                          format: email
                          example: johndoe@email.com
                        firstName:
                          type: string
                          example: John
                        lastName:
                          type: string
                          example: Doe
                        role:
                          type: string
                          example: User
        500:
          description: Request was not successful because an unexpected error ocurred
    post:
      tags:
        - Users
      summary: Create a new user (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  format: password
                  example: Password123*
                role:
                  type: string
                  example: User
      responses:
        200:
          description: User created successfully
        400:
          description: Request was not successful due to a validation error
        409:
          description: Request was not successful because the user already exists
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/users/{id}':
    get:
      tags:
        - Users
      summary: Get user (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: johndoe@email.com
                  role:
                    type: string
                    example: User
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the user was not found
        500:
          description: Request was not successful because an unexpected error ocurred
    put:
      tags:
        - Users
      summary: Update user (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  format: password
                  example: Password123*
                role:
                  type: string
                  example: User
      responses:
        200:
          description: User updated successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the user was not found
        409:
          description: Request was not successful because another user with the same email exists
        500:
          description: Request was not successful because an unexpected error ocurred
    delete:
      tags:
        - Users
      summary: Delete user (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: User deleted successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the user was not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/products':
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          format: int64
                          example: 1
                        name:
                          type: string
                          example: Apple
                        description:
                          type: string
                          example: A red fruit
                        price:
                          type: number
                          format: float
                          example: 2.99
                        quantity:
                          type: number
                          format: int64
                          example: 5

        500:
          description: Request was not successful because an unexpected error ocurred
    post:
      tags:
        - Products
      summary: Create new product (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Apple
                description:
                  type: string
                  example: A red fruit
                price:
                  type: number
                  format: float
                  example: 2.99
                quantity:
                  type: number
                  format: int64
                  example: 5
      responses:
        200:
          description: Product created successfully
        400:
          description: Request was not successful due to a validation error
        409:
          description: Request was not successful because another product with the same name exists
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/products/{id}':
    get:
      tags:
        - Products
      summary: Get product
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Apple
                  description:
                    type: string
                    example: A red fruit
                  price:
                    type: number
                    format: float
                    example: 2.99
                  quantity:
                    type: number
                    format: int64
                    example: 5
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the product was not found
        500:
          description: Request was not successful because an unexpected error ocurred
    put:
      tags:
        - Products
      summary: Update product (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Apple
                description:
                  type: string
                  example: A red fruit
                price:
                  type: number
                  format: float
                  example: 2.99
                quantity:
                  type: number
                  format: int64
                  example: 5
      responses:
        200:
          description: Product updated successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the product was not found
        409:
          description: Request was not successful because another product with the same name exists or product was already ordered
        500:
          description: Request was not successful because an unexpected error ocurred
    delete:
      tags:
        - Products
      summary: Delete product (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Product deleted successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the product was not found
        409:
          description: Request was not successful because the product was already ordered
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/products/{id}/quantity':
    patch:
      tags:
        - Products
      summary: Update product quantity (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  format: int64
                  example: 3
      responses:
        200:
          description: Product quantity updated successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the product was not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/products/{id}/price':
    patch:
      tags:
        - Products
      summary: Update product price (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: float
                  example: 2.99
      responses:
        200:
          description: Product price updated successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the product was not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/orders':
    get:
      tags:
        - Orders
      summary: Get all orders for currenty authenticated user
      responses:
        200:
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          format: int64
                          example: 1
                        status:
                          type: string
                          example: Pending
                        orderDate:
                          type: string
                          format: date-time
                          example: 2024-03-26T16:11:58.228Z
                        lastUpdate:
                          type: string
                          format: date-time
                          example: 2024-03-26T16:11:58.228Z
                        orderProducts:
                          type: array
                          items:
                            type: object
                            properties:
                              product:
                                type: object
                                properties:
                                  id:
                                    type: number
                                    format: int64
                                    example: 1
                                  name:
                                    type: string
                                    example: Apple
                                  description:
                                    type: string
                                    example: A red fruit
                              quantity:
                                type: number
                                format: int64
                                example: 5
                              unitPrice:
                                type: number
                                format: float
                                example: 2.99

        500:
          description: Request was not successful because an unexpected error ocurred
    post:
      tags:
        - Orders
      summary: Create new order for currenty authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                        format: int64
                        example: 1
                      quantity:
                        type: number
                        format: int64
                        example: 3

      responses:
        200:
          description: Order created successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because some products were not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/orders/{id}':
    get:
      tags:
        - Orders
      summary: Get order (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    format: int64
                    example: 1
                  userId:
                    type: number
                    format: int64
                    example: 1
                  status:
                    type: string
                    example: Pending
                  orderDate:
                    type: string
                    format: date-time
                    example: 2024-03-26T16:11:58.228Z
                  lastUpdate:
                    type: string
                    format: date-time
                    example: 2024-03-26T16:11:58.228Z
                  orderProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: object
                          properties:
                            id:
                              type: number
                              format: int64
                              example: 1
                            name:
                              type: string
                              example: Apple
                            description:
                              type: string
                              example: A red fruit
                        quantity:
                          type: number
                          format: int64
                          example: 5
                        unitPrice:
                          type: number
                          format: float
                          example: 2.99
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the order was not found
        500:
          description: Request was not successful because an unexpected error ocurred
    delete:
      tags:
        - Orders
      summary: Delete order (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Order deleted successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the order was not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/orders/{id}/status':
    patch:
      tags:
        - Orders
      summary: Update order status (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the order
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: Delivered
      responses:
        200:
          description: Order status updated successfully
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the order was not found
        500:
          description: Request was not successful because an unexpected error ocurred
  '/api/orders/user/{id}':
    get:
      tags:
        - Orders
      summary: Get all orders for user (Admin only)
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          format: int64
                          example: 1
                        status:
                          type: string
                          example: Pending
                        orderDate:
                          type: string
                          format: date-time
                          example: 2024-03-26T16:11:58.228Z
                        lastUpdate:
                          type: string
                          format: date-time
                          example: 2024-03-26T16:11:58.228Z
                        orderProducts:
                          type: array
                          items:
                            type: object
                            properties:
                              product:
                                type: object
                                properties:
                                  id:
                                    type: number
                                    format: int64
                                    example: 1
                                  name:
                                    type: string
                                    example: Apple
                                  description:
                                    type: string
                                    example: A red fruit
                              quantity:
                                type: number
                                format: int64
                                example: 5
                              unitPrice:
                                type: number
                                format: float
                                example: 2.99
        400:
          description: Request was not successful due to a validation error
        404:
          description: Request was not successful because the user was not found
        500:
          description: Request was not successful because an unexpected error ocurred
